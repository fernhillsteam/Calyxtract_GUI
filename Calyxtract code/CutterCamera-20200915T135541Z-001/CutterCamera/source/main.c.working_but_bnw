/*
 * main.c
 */

#include "driver/dbg.h"
#include "driver/ov7725.h"
#include "driver/hardware.h"


#define I2C_DELAY_BIT_BANG		500000

uint8_t qvga_frame[320*240*2];

int main(void)
{
	hw_basic_init();
	dbg_printf("Cutter Camera\r\n");

	hw_init();

	void dbg(void);
	dbg();

	while(1)
		;

	return 0;
}

const uint8_t config[][2] = {
  {0x32,0x00}, // HREF, default = 00
  {0x2a,0x00}, // EXHCH, default = 00
  {0x11,0x07}, // CLKRC, default = 80=75Hz, 0x01=50Hz, 0x02=30Hz,0x07=8Hz(3MHz)

  {0x12,0x46}, //QVGA RGB565, default = 00
  {0x12,0x46},

  /*
  {0x12,0x42}, //QVGA GRB422, default = 00
  {0x12,0x42},
*/
  {0x15,0x20},
  {0x0C,0x10},//0x11= test pattern

  {0x42,0x7f}, // Blue Channel target gain, default = 80
  {0x4d,0x00},//0x09 // FixGain, default = 00
  {0x63,0xf0}, // AWB_Ctrl0, default = F0
  {0x64,0xff}, // DSP_Ctrl1, default = 1F
  {0x65,0x20}, // DSP_Ctrl2, default = 00
  {0x66,0x00}, // DSP_Ctrl3, default = 10
  {0x67,0x00}, // DSP_Ctrl4, default = 00
  {0x69,0x5d}, // AWB_Ctrl, default = 5C
#if 0 == 1
  {0x22,0xFF},//7f // BDBase, default = FF
  {0x23,0x01}, // BDMStep, default = 00
  {0x24,0x34}, // AEW, default = 76
  {0x25,0x3c}, // AEB, default = 63
  {0x26,0xa1}, // VPT, default = D4
  {0x2b,0x00}, // EXHCL, default = 00
  {0x6b,0xaa}, // AWBCtrl3, default = A2
#endif

#if 0 == 1
  {0x90,0x0a},// // EDGE1, default = 08
  {0x91,0x01},// // DNSOff, default = 10
  {0x92,0x01},// // EDGE2, default = 1F
  {0x93,0x01}, // EDGE3, default = 01

  {0x94,0x5f}, // MTX1, default = 2C
  {0x95,0x53}, // MTX2, default = 24
  {0x96,0x11}, // MTX3, default = 08
  {0x97,0x1a}, // MTX4, default = 14
  {0x98,0x3d}, // MTX5, default = 24
  {0x99,0x5a}, // MTX6, default = 38
  {0x9a,0x1e}, // MTX_Ctrl, default = 9E

  {0x9b,0x00},//set luma, default = 00
	{0x9c,0x25},//set contrast, default = 40
	{0xa7,0x65},//set saturation, default = 40
	{0xa8,0x65},//set saturation, default = 40
	{0xa9,0x80},//set hue, default = 80
	{0xaa,0x80},//set hue, default = 80

	{0x9e,0x81}, // UVADJ0, default = 11
	{0xa6,0x06}, // SDE, default = 00

	{0x7e,0x0c}, // GAM1, default = 0E
	{0x7f,0x16}, // GAM2, default = 1A
	{0x80,0x2a}, // GAM3, default = 31
	{0x81,0x4e}, // GAM4, default = 5A
	{0x82,0x61}, // GAM5, default = 69
	{0x83,0x6f}, // GAM6, default = 75
	{0x84,0x7b}, // GAM7, default = 7E
	{0x85,0x86}, // GAM8, default = 88
	{0x86,0x8e}, // GAM9, default = 8F
	{0x87,0x97}, // GAM10, default = 96
	{0x88,0xa4}, // GAM11, default = A3
	{0x89,0xaf}, // GAM12, default = AF
	{0x8a,0xc5}, // GAM13, default = C4
	{0x8b,0xd7}, // GAM14, default = D7
	{0x8c,0xe8}, // GAM15, default = E8
	{0x8d,0x20}, // SLOP, default = 20
#endif

#if 0 == 0
	{0x33,0x00}, // Dummy Rows, default = 00
	{0x22,0x99}, // BDBase, default = FF
	{0x23,0x03}, // BDMBase, dfeault = 01
	{0x4a,0x00}, // LC_RADI, default =30
	{0x49,0x13}, // LC_COEFF, default = 50
	{0x47,0x08}, // LC_YC, default = 00
	{0x4b,0x14}, // LC_COEFFB, default = 50
	{0x4c,0x17}, // LC_COEFFR, default = 50
	{0x46,0x05}, // LC_CTR, default = 00
#endif

#if 0

  {0x42,0x7f}, // Blue Channel target gain, default = 80
  {0x4d,0x00},//0x09 // FixGain, default = 00
  {0x63,0xf0}, // AWB_Ctrl0, default = F0
  {0x64,0xff}, // DSP_Ctrl1, default = 1F
  {0x65,0x20}, // DSP_Ctrl2, default = 00
  {0x66,0x00}, // DSP_Ctrl3, default = 10
  {0x67,0x00}, // DSP_Ctrl4, default = 00
  {0x69,0x5d}, // AWB_Ctrl, default = 5C


  {0x13,0xff}, // COM8, default = 8F
/*  {0x0d,0x61},//PLL*/
  {0x0f,0xc5}, // COM6, default = 43
  {0x14,0x11}, // COM9, default = 4A
  {0x22,0xFF},//7f // BDBase, default = FF
  {0x23,0x01}, // BDMStep, default = 00
  {0x24,0x34}, // AEW, default = 76
  {0x25,0x3c}, // AEB, default = 63
  {0x26,0xa1}, // VPT, default = D4
  {0x2b,0x00}, // EXHCL, default = 00
  {0x6b,0xaa}, // AWBCtrl3, default = A2
  {0x13,0xff}, // COM8, default = 8F

  {0x90,0x0a},// // EDGE1, default = 08
  {0x91,0x01},// // DNSOff, default = 10
  {0x92,0x01},// // EDGE2, default = 1F
  {0x93,0x01}, // EDGE3, default = 01

  {0x94,0x5f}, // MTX1, default = 2C
  {0x95,0x53}, // MTX2, default = 24
  {0x96,0x11}, // MTX3, default = 08
  {0x97,0x1a}, // MTX4, default = 14
  {0x98,0x3d}, // MTX5, default = 24
  {0x99,0x5a}, // MTX6, default = 38
  {0x9a,0x1e}, // MTX_Ctrl, default = 9E

  {0x9b,0x00},//set luma, default = 00
  {0x9c,0x25},//set contrast, default = 40
  {0xa7,0x65},//set saturation, default = 40
  {0xa8,0x65},//set saturation, default = 40
  {0xa9,0x80},//set hue, default = 80
  {0xaa,0x80},//set hue, default = 80

  {0x9e,0x81}, // UVADJ0, default = 11
  {0xa6,0x06}, // SDE, default = 00

  {0x7e,0x0c}, // GAM1, default = 0E
  {0x7f,0x16}, // GAM2, default = 1A
  {0x80,0x2a}, // GAM3, default = 31
  {0x81,0x4e}, // GAM4, default = 5A
  {0x82,0x61}, // GAM5, default = 69
  {0x83,0x6f}, // GAM6, default = 75
  {0x84,0x7b}, // GAM7, default = 7E
  {0x85,0x86}, // GAM8, default = 88
  {0x86,0x8e}, // GAM9, default = 8F
  {0x87,0x97}, // GAM10, default = 96
  {0x88,0xa4}, // GAM11, default = A3
  {0x89,0xaf}, // GAM12, default = AF
  {0x8a,0xc5}, // GAM13, default = C4
  {0x8b,0xd7}, // GAM14, default = D7
  {0x8c,0xe8}, // GAM15, default = E8
  {0x8d,0x20}, // SLOP, default = 20

  {0x33,0x00}, // Dummy Rows, default = 00
  {0x22,0x99}, // BDBase, default = FF
  {0x23,0x03}, // BDMBase, dfeault = 01
  {0x4a,0x00}, // LC_RADI, default =30
  {0x49,0x13}, // LC_COEFF, default = 50
  {0x47,0x08}, // LC_YC, default = 00
  {0x4b,0x14}, // LC_COEFFB, default = 50
  {0x4c,0x17}, // LC_COEFFR, default = 50
  {0x46,0x05}, // LC_CTR, default = 00
  {0x0e,0xf5}, // COM5, default = 01
  {0x0c,0xd0}, // COM3, default = 10

#endif
  {0x09,0x03},	// COM2, Default = 01
  {0xff,0xff},
  };

void dbg(void)
{
	uint8_t tmp;

	const uint8_t addr[] = {0x09, 0xA, 0xB, 0x0C, 0xD, 0xF, 0x11, 0x12, 0x13, 0x14, 0x15, 0x17, 0x18, 0x19, 0x1A, 0x3C, 0x3E, 0x40,
			0xFF};

	const uint8_t addr2[] = {0x17, 0x18, 0x19, 0x1A, 0x3C, 0x3E, 0x40,
				0xFF};
	int i;

	i = 0;
	while (addr[i] != 0xFF)
	{
		//hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7725_read_reg(addr[i]);
		dbg_printf("%02X=%02X\r\n", addr[i], tmp);
		++i;
	}

	i = 0;
	while (config[i][0] != 0xFF)
	{
		//hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7725_write_reg(config[i][0], config[i][1]);
		tmp = ov7725_read_reg(config[i][0]);
		dbg_printf("%02X=%02X\r\n", config[i][0], tmp);
		++i;
	}

	i = 0;
	while (addr2[i] != 0xFF)
	{
		//hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7725_read_reg(addr2[i]);
		dbg_printf("%02X=%02X\r\n", addr2[i], tmp);
		++i;
	}

#if 0
	/*
	tmp = ov7725_read_reg(0x11);
	tmp = 0x40;
	ov7725_write_reg(0x11, tmp);
	tmp = ov7725_read_reg(0x11);
	dbg_printf("%02X=%02X\r\n", 0x11, tmp);
*/
	tmp = ov7725_read_reg(0x9);
	tmp |= 0x3;
	ov7725_write_reg(0x9, tmp);
	tmp = ov7725_read_reg(0x9);
	dbg_printf("%02X=%02X\r\n", 0x9, tmp);

	tmp = ov7725_read_reg(0x15);
	tmp |= (1U << 5);
	ov7725_write_reg(0x15, tmp);
	tmp = ov7725_read_reg(0x15);
	dbg_printf("%02X=%02X\r\n", 0x15, tmp);


/*
	tmp = ov7725_read_reg(0x12);
	tmp |= (1U << 3) | (1U << 2);
	ov7725_write_reg(0x15, tmp);
	tmp = ov7725_read_reg(0x15);
	dbg_printf("%02X=%02X\r\n", 0x12, tmp);
*/

	/*
	tmp = ov7725_read_reg(0x12);
	tmp |= (1U << 1);
	ov7725_write_reg(0x12, tmp);
	tmp = ov7725_read_reg(0x12);
	dbg_printf("%02X=%02X\r\n", 0x12, tmp);
	*/

#endif
#if 0
	//ov7725_write_reg(0x12 , 0x80);
	ov7725_write_reg(0x09 , 0x10);
	ov7725_write_reg(0xc1 , 0x7f);
	ov7725_write_reg(0x11 , 0x87);
	ov7725_write_reg(0x3a , 0x0c);
	ov7725_write_reg(0x3d , 0xc0);
	ov7725_write_reg(0x12 , 0x00);
	ov7725_write_reg(0x15 , 0x60);
	ov7725_write_reg(0x17 , 0x13);
	ov7725_write_reg(0x18 , 0x01);
	ov7725_write_reg(0x32 , 0xbf);
	ov7725_write_reg(0x19 , 0x02);
	ov7725_write_reg(0x1a , 0x7a);
	ov7725_write_reg(0x03 , 0x0a);
	ov7725_write_reg(0x0c , 0x00);
	ov7725_write_reg(0x3e , 0x00);
	ov7725_write_reg(0x70 , 0x3a);
	ov7725_write_reg(0x71 , 0x35);
	ov7725_write_reg(0x72 , 0x11);
	ov7725_write_reg(0x73 , 0xf0);
	ov7725_write_reg(0xa2 , 0x02);
	ov7725_write_reg(0x7a , 0x20);
	ov7725_write_reg(0x7b , 0x03);
	ov7725_write_reg(0x7c , 0x0a);
	ov7725_write_reg(0x7d , 0x1a);
	ov7725_write_reg(0x7e , 0x3f);
	ov7725_write_reg(0x7f , 0x4e);
	ov7725_write_reg(0x80 , 0x5b);
	ov7725_write_reg(0x81 , 0x68);
	ov7725_write_reg(0x82 , 0x75);
	ov7725_write_reg(0x83 , 0x7f);
	ov7725_write_reg(0x84 , 0x89);
	ov7725_write_reg(0x85 , 0x9a);
	ov7725_write_reg(0x86 , 0xa6);
	ov7725_write_reg(0x87 , 0xbd);
	ov7725_write_reg(0x88 , 0xd3);
	ov7725_write_reg(0x89 , 0xe8);
	ov7725_write_reg(0x13 , 0xe0);
	ov7725_write_reg(0x00 , 0x00);
	ov7725_write_reg(0x10 , 0x00);
	ov7725_write_reg(0x0d , 0x40);
	ov7725_write_reg(0x14 , 0x28);
	ov7725_write_reg(0xa5 , 0x02);
	ov7725_write_reg(0xab , 0x02);
	ov7725_write_reg(0x24 , 0x68);
	ov7725_write_reg(0x25 , 0x58);
	ov7725_write_reg(0x26 , 0xc2);
	ov7725_write_reg(0x9f , 0x78);
	ov7725_write_reg(0xa0 , 0x68);
	ov7725_write_reg(0xa1 , 0x03);
	ov7725_write_reg(0xa6 , 0xd8);
	ov7725_write_reg(0xa7 , 0xd8);
	ov7725_write_reg(0xa8 , 0xf0);
	ov7725_write_reg(0xa9 , 0x90);
	ov7725_write_reg(0xaa , 0x14);
	ov7725_write_reg(0x13 , 0xe5);
	ov7725_write_reg(0x0e , 0x61);
	ov7725_write_reg(0x0f , 0x4b);
	ov7725_write_reg(0x16 , 0x02);
	ov7725_write_reg(0x1e , 0x37);
	ov7725_write_reg(0x21 , 0x02);
	ov7725_write_reg(0x22 , 0x91);
	ov7725_write_reg(0x29 , 0x07);
	ov7725_write_reg(0x33 , 0x0b);
	ov7725_write_reg(0x35 , 0x0b);
	ov7725_write_reg(0x37 , 0x1d);
	ov7725_write_reg(0x38 , 0x71);
	ov7725_write_reg(0x39 , 0x2a);
	ov7725_write_reg(0x3c , 0x78);
	ov7725_write_reg(0x4d , 0x40);
	ov7725_write_reg(0x4e , 0x20);
	ov7725_write_reg(0x69 , 0x00);
	ov7725_write_reg(0x6b , 0x0a);
	ov7725_write_reg(0x74 , 0x10);
	ov7725_write_reg(0x8d , 0x4f);
	ov7725_write_reg(0x8e , 0x00);
	ov7725_write_reg(0x8f , 0x00);
	ov7725_write_reg(0x90 , 0x00);
	ov7725_write_reg(0x91 , 0x00);
	ov7725_write_reg(0x96 , 0x00);
	ov7725_write_reg(0x9a , 0x80);
	ov7725_write_reg(0xb0 , 0x84);
	ov7725_write_reg(0xb1 , 0x0c);
	ov7725_write_reg(0xb2 , 0x0e);
	ov7725_write_reg(0xb3 , 0x82);
	ov7725_write_reg(0xb8 , 0x0a);
	ov7725_write_reg(0x43 , 0x0a);
	ov7725_write_reg(0x44 , 0xf2);
	ov7725_write_reg(0x45 , 0x39);
	ov7725_write_reg(0x46 , 0x62);
	ov7725_write_reg(0x47 , 0x3d);
	ov7725_write_reg(0x48 , 0x55);
	ov7725_write_reg(0x59 , 0x83);
	ov7725_write_reg(0x5a , 0x0d);
	ov7725_write_reg(0x5b , 0xcd);
	ov7725_write_reg(0x5c , 0x8c);
	ov7725_write_reg(0x5d , 0x77);
	ov7725_write_reg(0x5e , 0x16);
	ov7725_write_reg(0x6c , 0x0a);
	ov7725_write_reg(0x6d , 0x65);
	ov7725_write_reg(0x6e , 0x11);
	ov7725_write_reg(0x6a , 0x40);
	ov7725_write_reg(0x01 , 0x56);
	ov7725_write_reg(0x02 , 0x44);
	ov7725_write_reg(0x13 , 0xe7);
	ov7725_write_reg(0x4f , 0x88);
	ov7725_write_reg(0x50 , 0x8b);
	ov7725_write_reg(0x51 , 0x04);
	ov7725_write_reg(0x52 , 0x11);
	ov7725_write_reg(0x53 , 0x8c);
	ov7725_write_reg(0x54 , 0x9d);
	ov7725_write_reg(0x55 , 0x00);
	ov7725_write_reg(0x56 , 0x40);
	ov7725_write_reg(0x57 , 0x80);
	ov7725_write_reg(0x58 , 0x9a);
	ov7725_write_reg(0x41 , 0x08);
	ov7725_write_reg(0x3f , 0x00);
	ov7725_write_reg(0x75 , 0x04);
	ov7725_write_reg(0x76 , 0x60);
	ov7725_write_reg(0x4c , 0x00);
	ov7725_write_reg(0x77 , 0x01);
	ov7725_write_reg(0x3d , 0xc2);
	ov7725_write_reg(0x4b , 0x09);
	ov7725_write_reg(0xc9 , 0x30);
	ov7725_write_reg(0x41 , 0x38);
	ov7725_write_reg(0x56 , 0x40);
	ov7725_write_reg(0x34 , 0x11);
	ov7725_write_reg(0x3b , 0x12);
	ov7725_write_reg(0xa4 , 0x88);
	ov7725_write_reg(0x96 , 0x00);
	ov7725_write_reg(0x97 , 0x30);
	ov7725_write_reg(0x98 , 0x20);
	ov7725_write_reg(0x99 , 0x30);
	ov7725_write_reg(0x9a , 0x84);
	ov7725_write_reg(0x9b , 0x29);
	ov7725_write_reg(0x9c , 0x03);
	ov7725_write_reg(0x9d , 0x99);
	ov7725_write_reg(0x9e , 0x7f);
	ov7725_write_reg(0x78 , 0x04);
	ov7725_write_reg(0x79 , 0x01);
	ov7725_write_reg(0xc8 , 0xf0);
	ov7725_write_reg(0x79 , 0x0f);
	ov7725_write_reg(0xc8 , 0x00);
	ov7725_write_reg(0x79 , 0x10);
	ov7725_write_reg(0xc8 , 0x7e);
	ov7725_write_reg(0x79 , 0x0a);
	ov7725_write_reg(0xc8 , 0x80);
	ov7725_write_reg(0x79 , 0x0b);
	ov7725_write_reg(0xc8 , 0x01);
	ov7725_write_reg(0x79 , 0x0c);
	ov7725_write_reg(0xc8 , 0x0f);
	ov7725_write_reg(0x79 , 0x0d);
	ov7725_write_reg(0xc8 , 0x20);
	ov7725_write_reg(0x79 , 0x09);
	ov7725_write_reg(0xc8 , 0x80);
	ov7725_write_reg(0x79 , 0x02);
	ov7725_write_reg(0xc8 , 0xc0);
	ov7725_write_reg(0x79 , 0x03);
	ov7725_write_reg(0xc8 , 0x40);
	ov7725_write_reg(0x79 , 0x05);
	ov7725_write_reg(0xc8 , 0x30);
	ov7725_write_reg(0x79 , 0x26);
	ov7725_write_reg(0x62 , 0x00);
	ov7725_write_reg(0x63 , 0x00);
	ov7725_write_reg(0x64 , 0x06);
	ov7725_write_reg(0x65 , 0x00);
	ov7725_write_reg(0x66 , 0x05);
	ov7725_write_reg(0x94 , 0x05);
	ov7725_write_reg(0x95 , 0x09);
	ov7725_write_reg(0x2a , 0x10);
	ov7725_write_reg(0x2b , 0xc2);
	ov7725_write_reg(0x15 , 0x20);
	ov7725_write_reg(0x3a , 0x04);
	ov7725_write_reg(0x3d , 0xc3);
	ov7725_write_reg(0x19 , 0x03);
	ov7725_write_reg(0x1a , 0x7b);
	ov7725_write_reg(0x2a , 0x00);
	ov7725_write_reg(0x2b , 0x00);
	ov7725_write_reg(0x18 , 0x01);
	ov7725_write_reg(0x19 , 0x03);
	ov7725_write_reg(0x1a , 0x21);
	ov7725_write_reg(0x03 , 0x05);
	ov7725_write_reg(0x17 , 0x13);
	ov7725_write_reg(0x18 , 0x27);
	ov7725_write_reg(0x32 , 0x24);
	ov7725_write_reg(0xe6 , 0x80);
	ov7725_write_reg(0xe1 , 0x40);
	ov7725_write_reg(0xe4 , 0xb8);
	ov7725_write_reg(0xe5 , 0x33);
	ov7725_write_reg(0xbf , 0xf0);
	ov7725_write_reg(0x66 , 0x05);
	ov7725_write_reg(0x62 , 0x10);
	ov7725_write_reg(0x63 , 0x0b);
	ov7725_write_reg(0x65 , 0x07);
	ov7725_write_reg(0x64 , 0x0f);
	ov7725_write_reg(0x94 , 0x0e);
	ov7725_write_reg(0x95 , 0x12);
	ov7725_write_reg(0x4f , 0x74);
	ov7725_write_reg(0x50 , 0x59);
	ov7725_write_reg(0x51 , 0x1a);
	ov7725_write_reg(0x52 , 0x12);
	ov7725_write_reg(0x53 , 0x6a);
	ov7725_write_reg(0x54 , 0x7c);
	ov7725_write_reg(0x58 , 0x1e);
	ov7725_write_reg(0x41 , 0x38);
	ov7725_write_reg(0x75 , 0x05);
	ov7725_write_reg(0x76 , 0xe0);
	ov7725_write_reg(0x77 , 0x07);
	ov7725_write_reg(0x24 , 0x38);
	ov7725_write_reg(0x25 , 0x28);
	ov7725_write_reg(0x26 , 0x80);
	ov7725_write_reg(0x7a , 0x10);
	ov7725_write_reg(0x7b , 0x0c);
	ov7725_write_reg(0x7c , 0x17);
	ov7725_write_reg(0x7d , 0x2c);
	ov7725_write_reg(0x7e , 0x50);
	ov7725_write_reg(0x7f , 0x60);
	ov7725_write_reg(0x80 , 0x6e);
	ov7725_write_reg(0x81 , 0x7b);
	ov7725_write_reg(0x82 , 0x87);
	ov7725_write_reg(0x83 , 0x92);
	ov7725_write_reg(0x84 , 0x9c);
	ov7725_write_reg(0x85 , 0xaf);
	ov7725_write_reg(0x86 , 0xbf);
	ov7725_write_reg(0x87 , 0xd7);
	ov7725_write_reg(0x88 , 0xe8);
	ov7725_write_reg(0x89 , 0xf4);
	ov7725_write_reg(0x43 , 0x0a);
	ov7725_write_reg(0x44 , 0xf2);
	ov7725_write_reg(0x45 , 0x46);
	ov7725_write_reg(0x46 , 0x5f);
	ov7725_write_reg(0x47 , 0x2e);
	ov7725_write_reg(0x48 , 0x42);
	ov7725_write_reg(0x59 , 0xb1);
	ov7725_write_reg(0x5a , 0xb5);
	ov7725_write_reg(0x5b , 0xdd);
	ov7725_write_reg(0x5c , 0x7b);
	ov7725_write_reg(0x5d , 0x57);
	ov7725_write_reg(0x5e , 0x14);
	ov7725_write_reg(0x6c , 0x0e);
	ov7725_write_reg(0x6d , 0x65);
	ov7725_write_reg(0x6e , 0x11);
	ov7725_write_reg(0x6f , 0x9e);
	ov7725_write_reg(0x09 , 0x00);
#endif
	dbg_printf("Img Rd\r\n");

	extern uint32_t ov7725_read_frame(uint8_t *img);
	ov7725_read_frame(qvga_frame);

	extern void cnt_vsync(void);
	cnt_vsync();

	dbg_printf("Img Tx\r\n");

	while(1);
}

#if 0
void dbg_7670(void)
{
	uint8_t tmp;

#if 0
	for (;;)
	{
		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_read_reg(0xA);
		dbg_printf("-%02X\r\n", tmp);
		led1_on();

		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_read_reg(0xB);
		dbg_printf("-%02X\r\n", tmp);
		led1_off();

		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_read_reg(0x1);
		dbg_printf("-%02X\r\n", tmp);

		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_read_reg(0x1C);
		dbg_printf("-%02X\r\n", tmp);

		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_read_reg(0x1D);
		dbg_printf("-%02X\r\n", tmp);

		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_read_reg(0x17);
		dbg_printf("-%02X\r\n", tmp);

		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_read_reg(0x18);
		dbg_printf("-%02X\r\n", tmp);

		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_read_reg(0x19);
		dbg_printf("-%02X\r\n", tmp);

		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_read_reg(0x1B);
		dbg_printf("$%02X\r\n", tmp);

		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_write_reg(0x1B, 0x1);

		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_read_reg(0x1B);
		dbg_printf("$%02X\r\n", tmp);

		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_write_reg(0x1B, 0x2);
	}
#endif
	const uint8_t addr[] = {0x09, 0x0C, 0xD, 0xF, 0x11, 0x12, 0x13, 0x14, 0x15, 0x17, 0x18, 0x19, 0x1A, 0x3C, 0x3E, 0x40,
			0xFF};
	int i;

	i = 0;
	while (addr[i] != 0xFF)
	{
		hw_delay(I2C_DELAY_BIT_BANG*10);
		tmp = ov7670_read_reg(addr[i]);
		dbg_printf("%02X=%02X\r\n", addr[i], tmp);
		++i;
	}
#if 1
	tmp = ov7670_read_reg(0x11);
	tmp = 0x40;
	ov7670_write_reg(0x11, tmp);
	tmp = ov7670_read_reg(0x11);
	dbg_printf("%02X=%02X\r\n", 0x11, tmp);

	tmp = ov7670_read_reg(0x9);
	tmp |= 0x3;
	ov7670_write_reg(0x9, tmp);
	tmp = ov7670_read_reg(0x9);
	dbg_printf("%02X=%02X\r\n", 0x9, tmp);

	tmp = ov7670_read_reg(0x15);
	tmp |= (1U << 5) | (1U << 6) | (1U << 2);
	ov7670_write_reg(0x15, tmp);
	tmp = ov7670_read_reg(0x15);
	dbg_printf("%02X=%02X\r\n", 0x15, tmp);
/*
	tmp = ov7670_read_reg(0x12);
	tmp |= (1U << 3) | (1U << 2);
	ov7670_write_reg(0x15, tmp);
	tmp = ov7670_read_reg(0x15);
	dbg_printf("%02X=%02X\r\n", 0x12, tmp);
*/
	tmp = ov7670_read_reg(0x12);
	tmp |= (1U << 1);
	ov7670_write_reg(0x15, tmp);
	tmp = ov7670_read_reg(0x15);
	dbg_printf("%02X=%02X\r\n", 0x12, tmp);

#else
	//ov7670_write_reg(0x12 , 0x80);
	ov7670_write_reg(0x09 , 0x10);
	ov7670_write_reg(0xc1 , 0x7f);
	ov7670_write_reg(0x11 , 0x87);
	ov7670_write_reg(0x3a , 0x0c);
	ov7670_write_reg(0x3d , 0xc0);
	ov7670_write_reg(0x12 , 0x00);
	ov7670_write_reg(0x15 , 0x60);
	ov7670_write_reg(0x17 , 0x13);
	ov7670_write_reg(0x18 , 0x01);
	ov7670_write_reg(0x32 , 0xbf);
	ov7670_write_reg(0x19 , 0x02);
	ov7670_write_reg(0x1a , 0x7a);
	ov7670_write_reg(0x03 , 0x0a);
	ov7670_write_reg(0x0c , 0x00);
	ov7670_write_reg(0x3e , 0x00);
	ov7670_write_reg(0x70 , 0x3a);
	ov7670_write_reg(0x71 , 0x35);
	ov7670_write_reg(0x72 , 0x11);
	ov7670_write_reg(0x73 , 0xf0);
	ov7670_write_reg(0xa2 , 0x02);
	ov7670_write_reg(0x7a , 0x20);
	ov7670_write_reg(0x7b , 0x03);
	ov7670_write_reg(0x7c , 0x0a);
	ov7670_write_reg(0x7d , 0x1a);
	ov7670_write_reg(0x7e , 0x3f);
	ov7670_write_reg(0x7f , 0x4e);
	ov7670_write_reg(0x80 , 0x5b);
	ov7670_write_reg(0x81 , 0x68);
	ov7670_write_reg(0x82 , 0x75);
	ov7670_write_reg(0x83 , 0x7f);
	ov7670_write_reg(0x84 , 0x89);
	ov7670_write_reg(0x85 , 0x9a);
	ov7670_write_reg(0x86 , 0xa6);
	ov7670_write_reg(0x87 , 0xbd);
	ov7670_write_reg(0x88 , 0xd3);
	ov7670_write_reg(0x89 , 0xe8);
	ov7670_write_reg(0x13 , 0xe0);
	ov7670_write_reg(0x00 , 0x00);
	ov7670_write_reg(0x10 , 0x00);
	ov7670_write_reg(0x0d , 0x40);
	ov7670_write_reg(0x14 , 0x28);
	ov7670_write_reg(0xa5 , 0x02);
	ov7670_write_reg(0xab , 0x02);
	ov7670_write_reg(0x24 , 0x68);
	ov7670_write_reg(0x25 , 0x58);
	ov7670_write_reg(0x26 , 0xc2);
	ov7670_write_reg(0x9f , 0x78);
	ov7670_write_reg(0xa0 , 0x68);
	ov7670_write_reg(0xa1 , 0x03);
	ov7670_write_reg(0xa6 , 0xd8);
	ov7670_write_reg(0xa7 , 0xd8);
	ov7670_write_reg(0xa8 , 0xf0);
	ov7670_write_reg(0xa9 , 0x90);
	ov7670_write_reg(0xaa , 0x14);
	ov7670_write_reg(0x13 , 0xe5);
	ov7670_write_reg(0x0e , 0x61);
	ov7670_write_reg(0x0f , 0x4b);
	ov7670_write_reg(0x16 , 0x02);
	ov7670_write_reg(0x1e , 0x37);
	ov7670_write_reg(0x21 , 0x02);
	ov7670_write_reg(0x22 , 0x91);
	ov7670_write_reg(0x29 , 0x07);
	ov7670_write_reg(0x33 , 0x0b);
	ov7670_write_reg(0x35 , 0x0b);
	ov7670_write_reg(0x37 , 0x1d);
	ov7670_write_reg(0x38 , 0x71);
	ov7670_write_reg(0x39 , 0x2a);
	ov7670_write_reg(0x3c , 0x78);
	ov7670_write_reg(0x4d , 0x40);
	ov7670_write_reg(0x4e , 0x20);
	ov7670_write_reg(0x69 , 0x00);
	ov7670_write_reg(0x6b , 0x0a);
	ov7670_write_reg(0x74 , 0x10);
	ov7670_write_reg(0x8d , 0x4f);
	ov7670_write_reg(0x8e , 0x00);
	ov7670_write_reg(0x8f , 0x00);
	ov7670_write_reg(0x90 , 0x00);
	ov7670_write_reg(0x91 , 0x00);
	ov7670_write_reg(0x96 , 0x00);
	ov7670_write_reg(0x9a , 0x80);
	ov7670_write_reg(0xb0 , 0x84);
	ov7670_write_reg(0xb1 , 0x0c);
	ov7670_write_reg(0xb2 , 0x0e);
	ov7670_write_reg(0xb3 , 0x82);
	ov7670_write_reg(0xb8 , 0x0a);
	ov7670_write_reg(0x43 , 0x0a);
	ov7670_write_reg(0x44 , 0xf2);
	ov7670_write_reg(0x45 , 0x39);
	ov7670_write_reg(0x46 , 0x62);
	ov7670_write_reg(0x47 , 0x3d);
	ov7670_write_reg(0x48 , 0x55);
	ov7670_write_reg(0x59 , 0x83);
	ov7670_write_reg(0x5a , 0x0d);
	ov7670_write_reg(0x5b , 0xcd);
	ov7670_write_reg(0x5c , 0x8c);
	ov7670_write_reg(0x5d , 0x77);
	ov7670_write_reg(0x5e , 0x16);
	ov7670_write_reg(0x6c , 0x0a);
	ov7670_write_reg(0x6d , 0x65);
	ov7670_write_reg(0x6e , 0x11);
	ov7670_write_reg(0x6a , 0x40);
	ov7670_write_reg(0x01 , 0x56);
	ov7670_write_reg(0x02 , 0x44);
	ov7670_write_reg(0x13 , 0xe7);
	ov7670_write_reg(0x4f , 0x88);
	ov7670_write_reg(0x50 , 0x8b);
	ov7670_write_reg(0x51 , 0x04);
	ov7670_write_reg(0x52 , 0x11);
	ov7670_write_reg(0x53 , 0x8c);
	ov7670_write_reg(0x54 , 0x9d);
	ov7670_write_reg(0x55 , 0x00);
	ov7670_write_reg(0x56 , 0x40);
	ov7670_write_reg(0x57 , 0x80);
	ov7670_write_reg(0x58 , 0x9a);
	ov7670_write_reg(0x41 , 0x08);
	ov7670_write_reg(0x3f , 0x00);
	ov7670_write_reg(0x75 , 0x04);
	ov7670_write_reg(0x76 , 0x60);
	ov7670_write_reg(0x4c , 0x00);
	ov7670_write_reg(0x77 , 0x01);
	ov7670_write_reg(0x3d , 0xc2);
	ov7670_write_reg(0x4b , 0x09);
	ov7670_write_reg(0xc9 , 0x30);
	ov7670_write_reg(0x41 , 0x38);
	ov7670_write_reg(0x56 , 0x40);
	ov7670_write_reg(0x34 , 0x11);
	ov7670_write_reg(0x3b , 0x12);
	ov7670_write_reg(0xa4 , 0x88);
	ov7670_write_reg(0x96 , 0x00);
	ov7670_write_reg(0x97 , 0x30);
	ov7670_write_reg(0x98 , 0x20);
	ov7670_write_reg(0x99 , 0x30);
	ov7670_write_reg(0x9a , 0x84);
	ov7670_write_reg(0x9b , 0x29);
	ov7670_write_reg(0x9c , 0x03);
	ov7670_write_reg(0x9d , 0x99);
	ov7670_write_reg(0x9e , 0x7f);
	ov7670_write_reg(0x78 , 0x04);
	ov7670_write_reg(0x79 , 0x01);
	ov7670_write_reg(0xc8 , 0xf0);
	ov7670_write_reg(0x79 , 0x0f);
	ov7670_write_reg(0xc8 , 0x00);
	ov7670_write_reg(0x79 , 0x10);
	ov7670_write_reg(0xc8 , 0x7e);
	ov7670_write_reg(0x79 , 0x0a);
	ov7670_write_reg(0xc8 , 0x80);
	ov7670_write_reg(0x79 , 0x0b);
	ov7670_write_reg(0xc8 , 0x01);
	ov7670_write_reg(0x79 , 0x0c);
	ov7670_write_reg(0xc8 , 0x0f);
	ov7670_write_reg(0x79 , 0x0d);
	ov7670_write_reg(0xc8 , 0x20);
	ov7670_write_reg(0x79 , 0x09);
	ov7670_write_reg(0xc8 , 0x80);
	ov7670_write_reg(0x79 , 0x02);
	ov7670_write_reg(0xc8 , 0xc0);
	ov7670_write_reg(0x79 , 0x03);
	ov7670_write_reg(0xc8 , 0x40);
	ov7670_write_reg(0x79 , 0x05);
	ov7670_write_reg(0xc8 , 0x30);
	ov7670_write_reg(0x79 , 0x26);
	ov7670_write_reg(0x62 , 0x00);
	ov7670_write_reg(0x63 , 0x00);
	ov7670_write_reg(0x64 , 0x06);
	ov7670_write_reg(0x65 , 0x00);
	ov7670_write_reg(0x66 , 0x05);
	ov7670_write_reg(0x94 , 0x05);
	ov7670_write_reg(0x95 , 0x09);
	ov7670_write_reg(0x2a , 0x10);
	ov7670_write_reg(0x2b , 0xc2);
	ov7670_write_reg(0x15 , 0x20);
	ov7670_write_reg(0x3a , 0x04);
	ov7670_write_reg(0x3d , 0xc3);
	ov7670_write_reg(0x19 , 0x03);
	ov7670_write_reg(0x1a , 0x7b);
	ov7670_write_reg(0x2a , 0x00);
	ov7670_write_reg(0x2b , 0x00);
	ov7670_write_reg(0x18 , 0x01);
	ov7670_write_reg(0x19 , 0x03);
	ov7670_write_reg(0x1a , 0x21);
	ov7670_write_reg(0x03 , 0x05);
	ov7670_write_reg(0x17 , 0x13);
	ov7670_write_reg(0x18 , 0x27);
	ov7670_write_reg(0x32 , 0x24);
	ov7670_write_reg(0xe6 , 0x80);
	ov7670_write_reg(0xe1 , 0x40);
	ov7670_write_reg(0xe4 , 0xb8);
	ov7670_write_reg(0xe5 , 0x33);
	ov7670_write_reg(0xbf , 0xf0);
	ov7670_write_reg(0x66 , 0x05);
	ov7670_write_reg(0x62 , 0x10);
	ov7670_write_reg(0x63 , 0x0b);
	ov7670_write_reg(0x65 , 0x07);
	ov7670_write_reg(0x64 , 0x0f);
	ov7670_write_reg(0x94 , 0x0e);
	ov7670_write_reg(0x95 , 0x12);
	ov7670_write_reg(0x4f , 0x74);
	ov7670_write_reg(0x50 , 0x59);
	ov7670_write_reg(0x51 , 0x1a);
	ov7670_write_reg(0x52 , 0x12);
	ov7670_write_reg(0x53 , 0x6a);
	ov7670_write_reg(0x54 , 0x7c);
	ov7670_write_reg(0x58 , 0x1e);
	ov7670_write_reg(0x41 , 0x38);
	ov7670_write_reg(0x75 , 0x05);
	ov7670_write_reg(0x76 , 0xe0);
	ov7670_write_reg(0x77 , 0x07);
	ov7670_write_reg(0x24 , 0x38);
	ov7670_write_reg(0x25 , 0x28);
	ov7670_write_reg(0x26 , 0x80);
	ov7670_write_reg(0x7a , 0x10);
	ov7670_write_reg(0x7b , 0x0c);
	ov7670_write_reg(0x7c , 0x17);
	ov7670_write_reg(0x7d , 0x2c);
	ov7670_write_reg(0x7e , 0x50);
	ov7670_write_reg(0x7f , 0x60);
	ov7670_write_reg(0x80 , 0x6e);
	ov7670_write_reg(0x81 , 0x7b);
	ov7670_write_reg(0x82 , 0x87);
	ov7670_write_reg(0x83 , 0x92);
	ov7670_write_reg(0x84 , 0x9c);
	ov7670_write_reg(0x85 , 0xaf);
	ov7670_write_reg(0x86 , 0xbf);
	ov7670_write_reg(0x87 , 0xd7);
	ov7670_write_reg(0x88 , 0xe8);
	ov7670_write_reg(0x89 , 0xf4);
	ov7670_write_reg(0x43 , 0x0a);
	ov7670_write_reg(0x44 , 0xf2);
	ov7670_write_reg(0x45 , 0x46);
	ov7670_write_reg(0x46 , 0x5f);
	ov7670_write_reg(0x47 , 0x2e);
	ov7670_write_reg(0x48 , 0x42);
	ov7670_write_reg(0x59 , 0xb1);
	ov7670_write_reg(0x5a , 0xb5);
	ov7670_write_reg(0x5b , 0xdd);
	ov7670_write_reg(0x5c , 0x7b);
	ov7670_write_reg(0x5d , 0x57);
	ov7670_write_reg(0x5e , 0x14);
	ov7670_write_reg(0x6c , 0x0e);
	ov7670_write_reg(0x6d , 0x65);
	ov7670_write_reg(0x6e , 0x11);
	ov7670_write_reg(0x6f , 0x9e);
	ov7670_write_reg(0x09 , 0x00);
#endif
	dbg_printf("Img Rd\r\n");

	//ov7670_read_frame(qcif_frame);

	extern void cnt_vsync(void);
	cnt_vsync();

	dbg_printf("Img Tx\r\n");

	while(1);
}
#endif
