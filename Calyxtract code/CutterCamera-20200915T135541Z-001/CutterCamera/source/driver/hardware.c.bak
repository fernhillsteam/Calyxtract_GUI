
#include <stdint.h>
#include <stdbool.h>

#define TARGET_IS_TM4C129_RA1

#include "inc/hw_i2c.h"
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "inc/hw_pwm.h"
#include "inc/hw_udma.h"
#include "inc/hw_ints.h"
#include "inc/hw_timer.h"
#include "driverlib/pin_map.h"
#include "driverlib/i2c.h"
#include "driverlib/pwm.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/uart.h"
#include "driverlib/rom.h"
#include "driverlib/rom_map.h"
#include "driverlib/interrupt.h"
#include "driverlib/udma.h"
#include "driverlib/timer.h"
#include "ov7725.h"
#include "motor.h"
#include "encoder.h"
#include "dbg.h"
#include "hardware.h"


static void i2c_init(void);
static void uart_init(void);
static void gpio_init(void);
static void isr_init(void);
static void dma_init(void);
static void pwm_init(void);
static void timer_init(void);
static void Timer0AIntHandler(void);

static uint32_t g_ui32SysClock;
#pragma DATA_ALIGN(dma_table, 1024)
static uint8_t dma_table[1024];
uint8_t *img_buffer;

#define I2C_DELAY_BIT_BANG		500000


void hw_basic_init(void)
{
	// Setup Clock
	g_ui32SysClock = MAP_SysCtlClockFreqSet((SYSCTL_XTAL_25MHZ |
	                                             SYSCTL_OSC_MAIN |
	                                             SYSCTL_USE_PLL |
	                                             SYSCTL_CFG_VCO_480), 120000000);

	// Init peripherals
	uart_init();
}

void hw_init(void)
{
	gpio_init();
	pwm_init();
	i2c_init();
	ov7725_init();
	dma_init();
	timer_init();
	motor_init();
	enc_init();
	isr_init();
}

void hw_all_interrupt_enable(bool en)
{
	if (en)
		IntMasterEnable();
	else
		IntMasterDisable();
}

static void i2c_init(void)
{
	SysCtlPeripheralEnable(SYSCTL_PERIPH_I2C5);
	while(!SysCtlPeripheralReady(SYSCTL_PERIPH_I2C5))
		;

	GPIOPinConfigure(GPIO_PB4_I2C5SCL);
	GPIOPinConfigure(GPIO_PB5_I2C5SDA);

	GPIOPinTypeI2CSCL(GPIO_PORTB_BASE, GPIO_PIN_4);
	GPIOPinTypeI2C(GPIO_PORTB_BASE, GPIO_PIN_5);

	I2CMasterInitExpClk(I2C5_BASE, g_ui32SysClock, false);
	I2CMasterTimeoutSet(I2C5_BASE, 0xFA);  // 40ms timeout
}

static void uart_init(void)
{
	// Enable UART0
	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
	while(!SysCtlPeripheralReady(SYSCTL_PERIPH_UART0))
		;

	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
	while(!SysCtlPeripheralReady(SYSCTL_PERIPH_GPIOA))
		;

	// Configure IO pins
	GPIOPinConfigure(GPIO_PA0_U0RX);
	GPIOPinConfigure(GPIO_PA1_U0TX);
	ROM_GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

	// Configure baud rate
	ROM_UARTConfigSetExpClk(UART0_BASE, g_ui32SysClock, 460800,
		(UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
		 UART_CONFIG_PAR_NONE));
}

static void gpio_init(void)
{
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOG);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOH);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOJ);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOK);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOL);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOM);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPION);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOP);
    ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOQ);

    // PD6 - Disable USB
    ROM_GPIOPinTypeGPIOInput(GPIO_PORTD_BASE, GPIO_PIN_6);
	MAP_GPIOPadConfigSet(GPIO_PORTD_BASE, GPIO_PIN_6, GPIO_STRENGTH_2MA,
						 GPIO_PIN_TYPE_STD_WPD);

    // PJ0/1 are user buttons
    ROM_GPIOPinTypeGPIOInput(GPIO_PORTJ_BASE, GPIO_PIN_0 | GPIO_PIN_1);
    MAP_GPIOPadConfigSet(GPIO_PORTJ_BASE, GPIO_PIN_0 | GPIO_PIN_1,
						 GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
    ROM_GPIOPinWrite(GPIO_PORTJ_BASE, GPIO_PIN_0 | GPIO_PIN_1, 0);

    // PN0/1 are user LED's
    ROM_GPIOPinTypeGPIOOutput(GPIO_PORTN_BASE, GPIO_PIN_0 | GPIO_PIN_1);
	MAP_GPIOPadConfigSet(GPIO_PORTN_BASE, GPIO_PIN_0 | GPIO_PIN_1,
						 GPIO_STRENGTH_12MA, GPIO_PIN_TYPE_STD);
	ROM_GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0 | GPIO_PIN_1, 0);

	// PF0/4 are user LED's
	ROM_GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4);
	ROM_GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4, 0);
	MAP_GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_0 | GPIO_PIN_4,
						 GPIO_STRENGTH_12MA, GPIO_PIN_TYPE_STD);

	// ------------------------------------------------------------------------

	// D0:D7
	ROM_GPIOPinTypeGPIOInput(GPIO_PORTM_BASE, 0xFFU);
	//MAP_GPIOPadConfigSet(GPIO_PORTM_BASE, 0xFFU, GPIO_STRENGTH_8MA, GPIO_PIN_TYPE_STD_WPU);

	// VSYNC
	ROM_GPIOPinTypeGPIOInput(GPIO_PORTP_BASE, GPIO_PIN_0);
	MAP_GPIOPadConfigSet(GPIO_PORTP_BASE, GPIO_PIN_0, GPIO_STRENGTH_8MA, GPIO_PIN_TYPE_STD_WPD);
	ROM_GPIOIntTypeSet(GPIO_PORTP_BASE, GPIO_PIN_0, GPIO_RISING_EDGE|GPIO_DISCRETE_INT);
	//GPIOIntEnable(GPIO_PORTP_BASE, GPIO_PIN_0);

	// HREF
	ROM_GPIOPinTypeGPIOInput(GPIO_PORTQ_BASE, GPIO_PIN_0);
	ROM_GPIOIntTypeSet(GPIO_PORTP_BASE, GPIO_PIN_0, GPIO_FALLING_EDGE|GPIO_DISCRETE_INT);
	//MAP_GPIOPadConfigSet(GPIO_PORTQ_BASE, GPIO_PIN_0, GPIO_STRENGTH_8MA, GPIO_PIN_TYPE_STD_WPD);

	// PCLK
	ROM_GPIOPinTypeGPIOInput(GPIO_PORTK_BASE, GPIO_PIN_0);
	//MAP_GPIOPadConfigSet(GPIO_PORTK_BASE, GPIO_PIN_0, GPIO_STRENGTH_8MA, GPIO_PIN_TYPE_STD_WPU);
	ROM_GPIOIntTypeSet(GPIO_PORTK_BASE, GPIO_PIN_0, GPIO_RISING_EDGE);
	GPIODMATriggerEnable(GPIO_PORTK_BASE, GPIO_PIN_0);

	// Reset
	ROM_GPIOPinTypeGPIOOutput(GPIO_PORTG_BASE, GPIO_PIN_0);
	ROM_GPIOPinWrite(GPIO_PORTG_BASE, GPIO_PIN_0, 0);

	// PWDN
	ROM_GPIOPinTypeGPIOOutput(GPIO_PORTG_BASE, GPIO_PIN_1);
	ROM_GPIOPinWrite(GPIO_PORTG_BASE, GPIO_PIN_1, GPIO_PIN_1);

	// I2C
	ROM_GPIOPinTypeGPIOOutput(GPIO_PORTB_BASE, GPIO_PIN_4|GPIO_PIN_5);
	MAP_GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_4 | GPIO_PIN_5,
							 GPIO_STRENGTH_12MA, GPIO_PIN_TYPE_STD_WPU);
}

static void isr_init(void)
{
	extern void vsync_handler(void);
	extern void href_handler(void);

	GPIOIntEnable(GPIO_PORTP_BASE, GPIO_INT_PIN_0);
	GPIOIntRegister(GPIO_PORTP_BASE, vsync_handler);
	GPIOIntEnable(GPIO_PORTQ_BASE, GPIO_INT_PIN_0);
	GPIOIntRegister(GPIO_PORTQ_BASE, href_handler);

	extern void motor_pulse_count_handler(void);
	ROM_IntEnable(INT_TIMER1A);
	ROM_TimerIntEnable(TIMER1_BASE, TIMER_CAPA_MATCH);
	TimerIntRegister(TIMER1_BASE, TIMER_A, motor_pulse_count_handler);

	extern void enc_count_handler(void);
	ROM_IntEnable(INT_TIMER0A);
	ROM_TimerIntEnable(TIMER0_BASE, TIMER_CAPA_MATCH);
	TimerIntRegister(TIMER0_BASE, TIMER_A, Timer0AIntHandler);

#if 1
	extern void motor_ramp_timer_handler(void);
	ROM_IntEnable(INT_TIMER2A);
	ROM_TimerIntEnable(TIMER2_BASE, TIMER_TIMA_TIMEOUT);
	TimerIntRegister(TIMER2_BASE, TIMER_A, motor_ramp_timer_handler);
#endif
	IntMasterEnable();
}

static void dma_init(void)
{
	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_UDMA);

	MAP_uDMAEnable();
	MAP_uDMAControlBaseSet(&dma_table[0]);
	MAP_uDMAChannelAssign(UDMA_CH12_GPIOK);
	uDMAChannelAttributeDisable(UDMA_CH12_GPIOK, UDMA_ATTR_ALL);

	MAP_uDMAChannelControlSet(UDMA_CH12_GPIOK|UDMA_PRI_SELECT,
								UDMA_SIZE_8|
								UDMA_SRC_INC_NONE|
								UDMA_DST_INC_8|
								UDMA_ARB_1);
#if 0
	MAP_uDMAChannelTransferSet(UDMA_SEC_CHANNEL_UART2RX_12|UDMA_ALT_SELECT,
							UDMA_MODE_BASIC,
							&HWREG(GPIO_PORTM_BASE + (0x00U + (0xFFU << 2))),
							img_buffer,
							1);

	ROM_uDMAChannelEnable(UDMA_SEC_CHANNEL_UART2RX_12);
#endif

	MAP_uDMAChannelAssign(UDMA_CH6_TIMER2A);
	uDMAChannelAttributeDisable(UDMA_CH6_TIMER2A, UDMA_ATTR_ALL);

	MAP_uDMAChannelControlSet(UDMA_CH6_TIMER2A|UDMA_PRI_SELECT,
								UDMA_SIZE_16|
								UDMA_SRC_INC_16|
								UDMA_DST_INC_NONE|
								UDMA_ARB_1);
}

void hw_dma_set_img(uint8_t *p_img)
{
	MAP_uDMAChannelTransferSet(UDMA_CH12_GPIOK|UDMA_PRI_SELECT,
							UDMA_MODE_BASIC,
							&HWREG(GPIO_PORTM_BASE + (0x00U + (0xFFU << 2))),
							p_img,
							320*2);

	ROM_uDMAChannelAttributeEnable(UDMA_CH12_GPIOK, UDMA_ATTR_HIGH_PRIORITY);

	ROM_uDMAChannelEnable(UDMA_CH12_GPIOK);
}

uint8_t hw_is_dma_img_complete(void)
{
	return (MAP_uDMAChannelModeGet(UDMA_CH12_GPIOK) == UDMA_MODE_STOP);
}

static void pwm_init(void)
{
	// Configure IO pins
	GPIOPinConfigure(GPIO_PF1_M0PWM1);
	GPIOPinTypePWM(GPIO_PORTF_BASE, GPIO_PIN_1);
	MAP_GPIOPadConfigSet(GPIO_PORTF_BASE, GPIO_PIN_1,
							 GPIO_STRENGTH_12MA, GPIO_PIN_TYPE_STD);

	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);
	PWMClockSet(PWM0_BASE, PWM_SYSCLK_DIV_1);

	PWMGenConfigure(PWM0_BASE, PWM_GEN_0, PWM_GEN_MODE_DOWN | PWM_GEN_MODE_NO_SYNC);

	PWMGenPeriodSet(PWM0_BASE, PWM_GEN_0, 8);
	PWMPulseWidthSet(PWM0_BASE, PWM_OUT_1, PWMGenPeriodGet(PWM0_BASE, PWM_GEN_0) / 2);
	PWMOutputState(PWM0_BASE, PWM_OUT_1_BIT, true);
	PWMGenEnable(PWM0_BASE, PWM_GEN_0);
}

void led1_on(void)
{
	ROM_GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, GPIO_PIN_0);
}

void led1_off(void)
{
	ROM_GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_0, 0);
}

void led2_on(void)
{
	ROM_GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_1, GPIO_PIN_1);
}

void led2_off(void)
{
	ROM_GPIOPinWrite(GPIO_PORTN_BASE, GPIO_PIN_1, 0);
}

void hw_delay(uint32_t cnt)
{
	SysCtlDelay(cnt);
}


static void timer_init(void)
{
	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);

	//ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
	GPIOPinTypeTimer(GPIO_PORTD_BASE, GPIO_PIN_0);
	MAP_GPIOPadConfigSet(GPIO_PORTD_BASE, GPIO_PIN_0,
							 GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
	GPIOPinConfigure(GPIO_PD0_T0CCP0);

	GPIOPinTypeTimer(GPIO_PORTD_BASE, GPIO_PIN_1);
	MAP_GPIOPadConfigSet(GPIO_PORTD_BASE, GPIO_PIN_1,
							 GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPU);
	GPIOPinConfigure(GPIO_PD1_T0CCP1);


	TimerConfigure(TIMER0_BASE, (TIMER_CFG_SPLIT_PAIR | TIMER_CFG_A_CAP_COUNT_UP));
	TimerControlEvent(TIMER0_BASE, TIMER_A, TIMER_EVENT_POS_EDGE);
	TimerLoadSet(TIMER0_BASE, TIMER_A, 0xFFFF);
	TimerMatchSet(TIMER0_BASE, TIMER_A, 0xFFFF);
	ROM_TimerEnable(TIMER0_BASE, TIMER_A);

	//
	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER1);
	GPIOPinTypeTimer(GPIO_PORTD_BASE, GPIO_PIN_2);
	MAP_GPIOPadConfigSet(GPIO_PORTD_BASE, GPIO_PIN_2,
							 GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);
	GPIOPinConfigure(GPIO_PD2_T1CCP0);

	GPIOPinTypeTimer(GPIO_PORTD_BASE, GPIO_PIN_3);
	MAP_GPIOPadConfigSet(GPIO_PORTD_BASE, GPIO_PIN_3,
							 GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD);
	GPIOPinConfigure(GPIO_PD3_T1CCP1);

	TimerConfigure(TIMER1_BASE, (TIMER_CFG_SPLIT_PAIR | TIMER_CFG_A_CAP_COUNT_UP | TIMER_CFG_B_PWM));
	TimerControlEvent(TIMER1_BASE, TIMER_A, TIMER_EVENT_POS_EDGE);
	TimerLoadSet(TIMER1_BASE, TIMER_A, 0xFFFF);
	TimerMatchSet(TIMER1_BASE, TIMER_A, 200);

	TimerControlLevel(TIMER1_BASE, TIMER_B, true);
	TimerLoadSet(TIMER1_BASE, TIMER_B, 10000);
	TimerMatchSet(TIMER1_BASE, TIMER_B, 5000);

	TimerControlStall(TIMER1_BASE, TIMER_BOTH, true);

	ROM_SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER2);
	TimerConfigure(TIMER2_BASE, (TIMER_CFG_SPLIT_PAIR | TIMER_CFG_A_PERIODIC));
	TimerPrescaleSet(TIMER2_BASE, TIMER_A, 120-1);
	TimerLoadSet(TIMER2_BASE, TIMER_A, 10000-1);
	TimerDMAEventSet(TIMER2_BASE, TIMER_DMA_TIMEOUT_A);

	TimerControlStall(TIMER2_BASE, TIMER_A, true);
}

void Timer0AIntHandler(void)
{
	ROM_TimerEnable(TIMER0_BASE, TIMER_A);
	ROM_TimerIntClear(TIMER0_BASE, TIMER_CAPA_MATCH);

	ROM_UARTCharPut(UART0_BASE, '*');
}

